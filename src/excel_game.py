"""Models for mapping Excel rows to Game objects.

This file contains classes which are meant to wrap the contents
of the Excel file.
"""

from enum import Enum
from typing import Optional

import pandas as pd


class ExcelRegion(Enum):
    """Release regions for games"""

    ASIA = "AS"
    BRAZIL = "BR"
    GERMANY = "DE"
    EUROPE = "EU"
    FRANCE = "FR"
    JAPAN = "JP"
    KOREA = "KO"
    NORTH_AMERICA = "NA"

    def __str__(self) -> str:
        return self.name

    def __repr__(self) -> str:
        return self.__str__()


class ExcelGame:
    """Class representing a game row from the spreadsheet.

    This class holds basic properties of a game from the game
    spreadsheet.

    Attributes:
        id: An integer ID, generated by pandas
        title: The game's title
        platform: The game's release platform
        release_date: The game's release date
        release_region: The game's release region
        publisher: The game's publisher
        developer: The game's developer
        franchise: The franchise this game belongs to
        genre: This game's genre
        notes: Collection notes about this game
        owned_format: The format that this game is owned in (e.g. Physical, Digital)
    """

    id: int
    title: str
    platform: str
    release_date: Optional[pd.DatetimeIndex]
    release_region: ExcelRegion
    publisher: str
    developer: str
    franchise: str
    genre: str
    notes: str
    owned_format: str

    def __init__(
        self,
        id: int,
        title: str,
        platform: str,
        release_date: pd.DatetimeIndex,
        release_region: ExcelRegion,
        publisher: str,
        developer: str,
        franchise: str,
        genre: str,
        notes: str,
        owned_format: str,
    ):
        self.id = id
        self.title = str(title)
        self.platform = platform
        self.release_date = release_date
        self.release_region = release_region
        self.publisher = publisher
        self.developer = developer
        self.franchise = franchise
        self.genre = genre
        self.notes = notes
        self.owned_format = owned_format

    @property
    def release_year(self) -> Optional[int]:
        """Property to fetch a game's release year or None if it's Early Access"""
        return self.release_date.year if self.release_date is not None else None

    @property
    def full_name(self) -> str:
        """Property to return a game's full name including platform and release year"""
        return f"{self.title} ({self.platform}) [{self.release_year or 'Early Access'}]"

    def __str__(self) -> str:
        return str(self.__dict__)

    def __repr__(self) -> str:
        return self.__str__()
